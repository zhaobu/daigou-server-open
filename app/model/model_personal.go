package model

// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

import (
	"daigou/app/model/entity"
	"daigou/library/conf"
	"daigou/library/zaplog"
	"fmt"
	"time"

	"github.com/gogf/gf/util/gconv"
	"github.com/guregu/null"
	"github.com/jinzhu/gorm"
	jsoniter "github.com/json-iterator/go"
)

// 查看代购粉丝request   tb = tb.Offset(offset).Limit(_args.PageSize)
type SeeFansReq struct {
	UpDown      int `json:"up_down"`     //0:升序  1：降序
	Choice      int `json:"choice"`      //0:活跃度  1：消费金额 2：注册时间
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type SeeFansResp struct {
	UserID             uint32       `json:"user_id"`            //用户id
	NickName           string       `json:"nick_name"`          //用户姓名
	AvatarURL          string       `json:"avatar_url"`         //用户头像
	Category           int32        `json:"category"`           //0:关注用户 1:绑定用户
	Transaction_Amount int32        `json:"transaction_amount"` //交易总金额
	Transaction_Number int32        `json:"transaction_number"` //交易次数
	EndTime            *entity.Time `json:"end_time"`           //最后购买时间
	CreatedAt          *entity.Time `json:"created_at"`         //注册时间
	IsRed              int          `json:"is_red"`             //超过30天红字显示  0：不红  1：红
}

type SeeBingShopFans struct {
	UserID     uint32 `json:"user_id"`      //粉丝用户id
	BindShopID uint64 `json:"bind_shop_id"` //绑定的商店id
}

//查看代购粉丝
func SeeFans(req *SeeFansReq, ShopID uint64) (res []*SeeFansResp, resp []*SeeBingShopFans, err error) {
	tb := dbGorm.Table("shop_fans")
	rows := tb.Offset(req.Start_Index).Limit(req.Count).Select("user.user_id,user.created_at,user.nick_name,user.avatar_url,shop_fans.transaction_amount,shop_fans.transaction_number,shop_fans.end_time,shop_fans.category").
		Joins("inner join user on user.user_id = shop_fans.user_id").Where("shop_fans.shop_id=?", ShopID)
	if req.Choice == 0 {
		if req.UpDown == 0 {
			rows.Order("shop_fans.end_time").Scan(&res)
		} else {
			rows.Order("shop_fans.end_time desc").Scan(&res)
		}
	} else if req.Choice == 1 {
		if req.UpDown == 0 {
			rows.Order("shop_fans.transaction_amount").Scan(&res)
		} else {
			rows.Order("shop_fans.transaction_amount desc").Scan(&res)
		}
	} else {
		if req.UpDown == 0 {
			rows.Order("user.created_at").Scan(&res)
		} else {
			rows.Order("user.created_at desc").Scan(&res)
		}
	}
	err = rows.Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	err = dbGorm.Table("shop_fans").Where("shop_id=? AND DATE_SUB(CURDATE(), INTERVAL 30 DAY) > date(end_time)", ShopID).Scan(&resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

// 搜索代购粉丝request   tb = tb.Offset(offset).Limit(_args.PageSize)
type SearchFansReq struct {
	UpDown      int    `json:"up_down"`     //0:升序  1：降序
	Choice      int    `json:"choice"`      //0:活跃度  1：消费金额 2：注册时间
	NickName    string `json:"nick_name"`   //搜索人名称
	Start_Index int    `json:"start_index"` //查询起始索引
	Count       int    `json:"count"`       //页面列表个数
}

type SearchFansResp struct {
	UserID             uint32       `json:"user_id"`            //用户id
	NickName           string       `json:"nick_name"`          //用户姓名
	AvatarURL          string       `json:"avatar_url"`         //用户头像
	Category           int32        `json:"category"`           //0:关注用户 1:绑定用户
	Transaction_Amount int32        `json:"transaction_amount"` //交易总金额
	Transaction_Number int32        `json:"transaction_number"` //交易次数
	EndTime            *entity.Time `json:"end_time"`           //最后购买时间
	CreatedAt          *entity.Time `json:"created_at"`         //注册时间
	IsRed              int          `json:"is_red"`             //超过30天红字显示  0：不红  1：红
}

//搜索代购粉丝
func SearchFans(req *SearchFansReq, ShopID uint64) (res []*SearchFansResp, resp []*SeeBingShopFans, err error) {
	tb := dbGorm.Table("shop_fans")
	rows := tb.Offset(req.Start_Index).Limit(req.Count).Select("user.user_id,user.created_at,user.nick_name,user.avatar_url,shop_fans.transaction_amount,shop_fans.transaction_number,shop_fans.end_time,shop_fans.category").
		Joins("inner join user on user.user_id = shop_fans.user_id").Where("user.nick_name LIKE ? AND shop_fans.shop_id=?", "%"+req.NickName+"%", ShopID)
	if req.Choice == 0 {
		if req.UpDown == 0 {
			rows.Order("shop_fans.end_time").Scan(&res)
		} else {
			rows.Order("shop_fans.end_time desc").Scan(&res)
		}
	} else if req.Choice == 1 {
		if req.UpDown == 0 {
			rows.Order("shop_fans.transaction_amount").Scan(&res)
		} else {
			rows.Order("shop_fans.transaction_amount desc").Scan(&res)
		}
	} else {
		if req.UpDown == 0 {
			rows.Order("user.created_at").Scan(&res)
		} else {
			rows.Order("user.created_at desc").Scan(&res)
		}
	}
	err = rows.Error

	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SearchFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	err = dbGorm.Table("shop_fans").Where("shop_id=? AND DATE_SUB(CURDATE(), INTERVAL 30 DAY) > date(end_time)", ShopID).Scan(&resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

// 增加代购粉丝request
type IncreaseFansReq struct {
	ShopID     uint64 `json:"shop_id"`      //代购id
	UserID     uint32 `json:"user_id"`      //用户id
	BindShopID uint64 `json:"bind_shop_id"` //绑定的商店id
	Category   int32  `json:"category"`     //用于排序：1:绑定时添加 0：非绑定添加
}

type IncreaseFansResp struct {
	IsBing     uint8  //0:未有粉丝记录直接添加   1：已有粉丝记录应修补不能添加
	BindShopID uint64 `json:"bind_shop_id"` //绑定的商店id
}

//增加代购粉丝
func IncreaseFans(_tx *gorm.DB, req *IncreaseFansReq) (err error) {
	//游客账号不关注其他人,其他人也不关注体验商店
	confTest := conf.Conf.TestUser
	if uint32(req.ShopID) == confTest.Buyer.UserID || uint32(req.ShopID) == confTest.Seller.UserID ||
		req.UserID == confTest.Seller.UserID || req.UserID == confTest.Buyer.UserID {
		return
	}
	if req.ShopID == 0 || req.UserID == 0 {
		zaplog.Errorf("IncreaseFans db err,参数不合法,req:%v", req)
		return
	}
	if req.ShopID == gconv.Uint64(req.UserID) {
		zaplog.Errorf("IncreaseFans db err,参数不合法,req:%v", req)
		return
	}
	has, err := dbXorm.Table("shop_fans").Where("shop_id=? and user_id=?", req.ShopID, req.UserID).Exist()
	if has {
		zaplog.Debugf("已经是商店粉丝:req:%v", req)
		return err
	}
	tx := _tx
	if tx == nil {
		tx = dbGorm.Begin()
	}

	defer func() {
		if _tx != nil { //上级事务传递进来
			return
		}
		//当前函数为一个完整事务
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit().Error
	}()
	err = tx.Table("shop_fans").Create(&entity.ShopFans{ShopID: req.ShopID, UserID: req.UserID, Category: req.Category}).Error
	if err != nil {
		err = fmt.Errorf("IncreaseFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	sql := "update shop_info set shop_fans_count=shop_fans_count+1 where shop_id=?"
	err = tx.Exec(sql, req.ShopID).Error
	if err != nil {
		err = fmt.Errorf("IncreaseFans Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	return
}

//查看关注的店铺request
type SeeFollowShopReq struct {
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type SeeFollowShoResp struct {
	ID              uint32 `json:"id"`               //店铺标识
	ShopID          uint64 `json:"shop_id"`          //店铺ID
	ShopName        string `json:"shop_name"`        //店铺名称
	ShopUrl         string `json:"shop_url"`         //店铺头像
	ShopDescription string `json:"shop_description"` //店铺说明
	ShopFansCount   int32  `json:"shop_fans_count"`  //店铺粉丝数
	ShopStatus      int    `json:"shop_status"`      //0：关注的店铺  1：绑定的店铺
}

//查看关注的店铺
func SeeFollowShop(req *SeeFollowShopReq, UserID uint32) (res []*SeeFollowShoResp, resp *SeeBingShopFans, err error) {
	tb := dbGorm.Table("shop_fans")
	rows := tb.Offset(req.Start_Index).Limit(req.Count).Select("shop_info.shop_name,shop_info.shop_description,shop_info.shop_url,shop_info.shop_fans_count,shop_fans.id,shop_fans.shop_id").
		Joins("inner join shop_info on shop_info.shop_id = shop_fans.shop_id").Where("shop_fans.user_id=?", UserID).Order("shop_fans.category desc,shop_fans.created_at desc")
	rows.Scan(&res)
	err = rows.Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	resp = &SeeBingShopFans{}
	err = dbGorm.Table("user").Where("user_id=?", UserID).Scan(resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

//搜索关注的店铺request
type SearchFollowShopReq struct {
	ShopName    string `json:"shop_name"`   //搜索店铺名称
	Start_Index int    `json:"start_index"` //查询起始索引
	Count       int    `json:"count"`       //页面列表个数
}

type SearchFollowShoResp struct {
	ID              uint32 `json:"id"`               //店铺标识
	ShopID          uint64 `json:"shop_id"`          //店铺ID
	ShopName        string `json:"shop_name"`        //店铺名称
	ShopUrl         string `json:"shop_url"`         //店铺头像
	ShopDescription string `json:"shop_description"` //店铺说明
	ShopFansCount   int32  `json:"shop_fans_count"`  //店铺粉丝数
	ShopStatus      int    `json:"shop_status"`      //0：关注的店铺  1：绑定的店铺
}

//搜索关注的店铺
func SearchFollowShop(req *SearchFollowShopReq, UserID uint32) (res []*SearchFollowShoResp, resp *SeeBingShopFans, err error) {
	tb := dbGorm.Table("shop_fans")
	rows := tb.Offset(req.Start_Index).Limit(req.Count).Select("shop_info.shop_name,shop_info.shop_description,shop_info.shop_url,shop_info.shop_fans_count,shop_fans.id,shop_fans.shop_id").
		Joins("inner join shop_info on shop_info.shop_id = shop_fans.shop_id").Where("shop_info.shop_name LIKE ? AND shop_fans.user_id=?", "%"+req.ShopName+"%", UserID).Order("shop_fans.created_at desc,shop_fans.category desc")
	rows.Scan(&res)
	err = rows.Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SearchFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	resp = &SeeBingShopFans{}
	err = dbGorm.Table("user").Where("user_id=?", UserID).Scan(resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SearchFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

//增加关注的店铺request
type IncreaseFollowShopReq struct {
	ShopID uint64 `json:"shop_id"` //店铺ID
}

type IncreaseFollowShopResp struct {
	ShopID uint64 `json:"shop_id"` //店铺标识
}

//增加关注的店铺
func IncreaseFollowShop(req *IncreaseFollowShopReq, UserID uint32) (res *IncreaseFollowShopResp, err error) {
	tb := dbGorm.Table("shop_fans")
	var count int = 0
	err = tb.Where("user_id=? AND shop_id=?", UserID, req.ShopID).Count(&count).Error
	if count > 0 {
		return res, err
	}
	if req.ShopID == 0 {
		return res, err
	}
	FollowShop := &entity.ShopFans{}
	FollowShop.UserID = UserID
	FollowShop.ShopID = req.ShopID
	FollowShop.Category = 0
	err = tb.Create(FollowShop).Error
	if err != nil {
		err = fmt.Errorf("IncreaseFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	res = &IncreaseFollowShopResp{}
	err = tb.Where("user_id=? AND shop_id=?", UserID, req.ShopID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("IncreaseFollowShop Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//取消关注的店铺request
type DeleteFollowShopReq struct {
	ShopID uint64 `json:"shop_id"` //店铺ID
}

type DeleteFollowShopResp struct {
	ShopID uint64 `json:"shop_id"` //店铺ID 对比ID状态设置为取消关注
}

//取消关注的店铺
func DeleteFollowShop(req *DeleteFollowShopReq, UserID uint32) (res *DeleteFollowShopResp, err error) {
	tb := dbGorm.Table("shop_fans")
	res = &DeleteFollowShopResp{}
	res.ShopID = req.ShopID
	err = tb.Where("user_id=? AND shop_id=?", UserID, req.ShopID).Delete(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		return res, err
	}
	return res, nil
}

//查看默认地址request
type SeeDefaultAddressReq struct {
}

//查看地址request
type SeeAddressReq struct {
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type SeeAddressResp struct {
	AddressID       uint32 `json:"address_id"`     //地址编号
	IsDefault       int32  `json:"is_default"`     //0:不是默认地址 1:是
	Name            string `json:"name"`           //姓名
	Gender          int32  `json:"gender"`         //性别
	PhoneNumber     int64  `json:"phone_number"`   //手机号
	Province        string `json:"province"`       //省
	City            string `json:"city"`           //市
	Area            string `json:"area"`           //区
	DetailedAddress string `json:"address"`        //详细地址
	Classification  int    `json:"classification"` //0:代购或用户自己地址 1;名下成员员地址或自己上级代购地址
}

//查看默认地址
func SeeDefaultAddress(UserID uint32) (res *entity.UserAddress, err error) {
	res = &entity.UserAddress{}
	err = dbGorm.Where("is_default=1 and user_id=?", UserID).First(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeDefaultAddress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return nil, err
	}
	return res, nil
}

//查看地址
func SeeAddress(req *SeeAddressReq, UserID uint32) (res []*SeeAddressResp, err error) {
	tb := dbGorm.Table("user_address")
	err = tb.Offset(req.Start_Index).Limit(req.Count).Where("user_id=?", UserID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeAddress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//增加地址request
type IncreaseAddressReq struct {
	AddressID      uint32 `json:"address_id"`     //地址编号
	IsDefault      int32  `json:"is_default"`     //0:不设为默认地址 1:设为
	Name           string `json:"name"`           //姓名
	Genders        int32  `json:"Gender"`         //性别
	PhoneNumber    int64  `json:"phone_number"`   //手机号
	Province       string `json:"province"`       //省
	City           string `json:"city"`           //市
	Area           string `json:"area"`           //区
	Address        string `json:"address"`        //详细地址
	Classification int32  `json:"classification"` //0:代购或用户自己地址 1;名下成员员地址或自己上级代购地址
}

type IncreaseAddressResp struct {
}

//增加地址
func IncreaseAddress(req *IncreaseAddressReq, UserID uint32) (res *IncreaseAddressResp, err error) {
	tb := dbGorm.Table("user_address")
	if req.IsDefault == 1 {
		err = tb.Where("user_id=?", UserID).Update(map[string]interface{}{"is_default": 0}).Error
		if err != nil {
			err = fmt.Errorf("IncreaseAddress Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	Address := &entity.UserAddress{}
	Address.UserID = UserID
	Address.Name = req.Name
	Address.Gender = req.Genders
	Address.PhoneNumber = req.PhoneNumber
	Address.Province = req.Province
	Address.City = req.City
	Address.Area = req.Area
	Address.DetailedAddress = req.Address
	Address.IsDefault = req.IsDefault
	Address.Classification = req.Classification
	err = tb.Create(Address).Error
	if err != nil {
		err = fmt.Errorf("IncreaseAddress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}

	return res, err
}

//修改地址request
type ModifyAddressReq struct {
	AddressID      uint32 `json:"address_id"`     //地址编号
	IsDefault      int32  `json:"is_default"`     //0:不设为默认地址 1:设为
	Name           string `json:"name"`           //姓名
	Genders        int32  `json:"Gender"`         //性别
	PhoneNumber    int64  `json:"phone_number"`   //手机号
	Province       string `json:"province"`       //省
	City           string `json:"city"`           //市
	Area           string `json:"area"`           //区
	Address        string `json:"address"`        //详细地址
	Classification int32  `json:"classification"` //0:代购或用户自己地址 1;名下成员员地址或自己上级代购地址
}

type ModifyAddressResp struct {
}

//修改地址
func ModifyAddress(req *IncreaseAddressReq, UserID uint32) (res *ModifyAddressResp, err error) {
	tb := dbGorm.Table("user_address")

	if req.IsDefault == 1 {
		err = tb.Where("user_id=?", UserID).Update(map[string]interface{}{"is_default": 0}).Error
		if err != nil {
			err = fmt.Errorf("ModifyAddress Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	err = tb.Where("address_id=?", req.AddressID).Update(map[string]interface{}{"phone_number": req.PhoneNumber, "name": req.Name, "gender": req.Genders,
		"province": req.Province, "city": req.City, "area": req.Area, "detailed_address": req.Address, "is_default": req.IsDefault, "classification": req.Classification}).Error
	if err != nil {
		err = fmt.Errorf("ModifyAddress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//删除地址request
type DeleteAddressReq struct {
	AddressID uint32 `json:"address_id"` //地址编号
}

type DeleteAddressResp struct {
	AddressID uint32 `json:"address_id"` //地址编号
}

//删除地址
func DeleteAddress(req *DeleteAddressReq) (res *DeleteAddressResp, err error) {
	tb := dbGorm.Table("user_address")
	res = &DeleteAddressResp{}
	res.AddressID = req.AddressID
	err = tb.Where("address_id = ?", req.AddressID).Delete(res).Error
	if err != nil {
		return res, err
	}
	return res, err
}

//查看店铺信息request
type SeeShopInfoReq struct {
	UserID uint32 `json:"user_id"` //代购id
}

type SeeShopInfoResp struct {
	ShopName        string `json:"shop_name"`        //店铺名称
	ShopUrl         string `json:"shop_url"`         //店铺头像
	ShopDescription string `json:"shop_description"` //店铺说明
	WechatNumber    string `json:"wechat_number"`    //微信号
	IsEnable        int32  `json:"is_enable"`        //商铺状态0不启用1启用
	ShopWatermark   string `json:"shop_watermark"`   //图片水印
}

//查看店铺信息
func SeeShopInfo(ShopID uint64) (res *SeeShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	res = &SeeShopInfoResp{}
	err = tb.Where("shop_id=?", ShopID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//修改店铺信息request
type ModifyShopInfoReq struct {
	UserID          uint32 `json:"user_id"`          //代购id
	ShopName        string `json:"shop_name"`        //店铺名称
	ShopUrl         string `json:"shop_url"`         //店铺头像
	ShopDescription string `json:"shop_description"` //店铺说明
	WechatNumber    string `json:"wechat_number"`    //微信号
	IsEnable        int32  `json:"is_enable"`        //商铺状态0不启用1启用
}

type ModifyShopInfoResp struct {
}

//修改店铺信息
func ModifyShopInfo(req *ModifyShopInfoReq, ShopID uint64) (res *ModifyShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"shop_name": req.ShopName, "shop_url": req.ShopUrl, "shop_description": req.ShopDescription,
		"is_enable": req.IsEnable, "wechat_number": req.WechatNumber}).Error
	if err != nil {
		err = fmt.Errorf("ModifyShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//修改店铺名称
func ModifyShopInfoName(req *ModifyShopInfoReq, ShopID uint64) (res *ModifyShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"shop_name": req.ShopName}).Error
	if err != nil {
		err = fmt.Errorf("ModifyShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//修改店铺头像
func ModifyShopInfoUrl(req *ModifyShopInfoReq, ShopID uint64) (res *ModifyShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"shop_url": req.ShopUrl}).Error
	if err != nil {
		err = fmt.Errorf("ModifyShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//修改店铺简绍
func ModifyShopInfoDescription(req *ModifyShopInfoReq, ShopID uint64) (res *ModifyShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"shop_description": req.ShopDescription}).Error
	if err != nil {
		err = fmt.Errorf("ModifyShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//修改微信号
func ModifyShopInfoWechatNumber(req *ModifyShopInfoReq, ShopID uint64) (res *ModifyShopInfoResp, err error) {
	tb := dbGorm.Table("shop_info")
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"wechat_number": req.WechatNumber}).Error
	if err != nil {
		err = fmt.Errorf("ModifyShopInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//查看默认快递设置request
type SeeDefaultExpressReq struct {
	ShopID uint64 `json:"shop_id"` //店铺id
}

//查看默认快递设置
type SeeDefaultExpressResp struct {
	ExpressID        uint32  `json:"express_id"`         //快递标识
	ExpressName      string  `json:"express_name"`       //快递名称
	ExpressCode      string  `json:"express_code"`       //快递公司编码
	ExpressCompanyID uint32  `json:"express_company_id"` //快递公司ID
	ExpressOffer     float64 `json:"express_offer"`      //快递运费
}

//查看快递设置request
type SeeExpressReq struct {
	SelectStatus int `json:"select_status"` //查询全部传255
	Start_Index  int `json:"start_index"`   //查询起始索引
	Count        int `json:"count"`         //页面列表个数
}

type SeeExpressResp struct {
	ExpressID        uint32      `json:"express_id"`         //快递标识
	ExpressName      string      `json:"express_name"`       //快递名称
	ExpressCode      null.String `json:"express_code"`       //快递简称
	ExpressCompanyID uint32      `json:"express_company_id"` //快递公司ID
	PartnerID        null.String `json:"partner_id"`         //快递电子面单账号
	PartnerKey       null.String `json:"partner_key"`        //快递电子面子key
	ExpressOutlets   null.String `json:"express_outlets"`    //快递网点
	ExpressCost      null.Float  `json:"express_cost"`       //快递成本
	ExpressOffer     null.Float  `json:"express_offer"`      //快递报价
	IsDefault        int32       `json:"is_default"`         //0:不是默认快递 1：默认快递
}

//获取商铺默认快递设置
func SeeDefaultExpress(req *SeeDefaultExpressReq) (res *SeeDefaultExpressResp, err error) {
	sData := entity.ShopExpress{}
	tb := dbGorm.Table("shop_express")
	tb = tb.Where("shop_id=? and is_default=1", req.ShopID)
	var count int
	tb.Count(&count)
	if count == 0 {
		return //没有默认物流
	}
	err = tb.First(&sData).Error
	if err != nil {
		err = fmt.Errorf("SeeDefaultExpress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return nil, err
	}

	res = &SeeDefaultExpressResp{
		ExpressID:        sData.ExpressID,
		ExpressName:      sData.ExpressName,
		ExpressCode:      sData.ExpressCode,
		ExpressOffer:     sData.ExpressOffer.Float64,
		ExpressCompanyID: sData.ExpressCompanyID,
	}
	return res, err
}

//查看快递设置
func SeeExpress(req *SeeExpressReq, ShopID uint64) (res []*SeeExpressResp, err error) {
	tb := dbGorm.Table("shop_express")
	if req.SelectStatus == 255 {
		err = tb.Where("shop_id=?", ShopID).Scan(&res).Error
	} else {
		err = tb.Offset(req.Start_Index).Limit(req.Count).Where("shop_id=?", ShopID).Scan(&res).Error
	}

	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeExpress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//增加快递设置request
type IncreaseExpressReq struct {
	ExpressId        string  `json:"express_id"`         //快递公司id
	ExpressName      string  `json:"express_name"`       //快递名称
	ExpressCode      string  `json:"express_code"`       //快递简称
	ExpressCompanyID uint32  `json:"express_company_id"` //快递公司ID
	PartnerID        string  `json:"partner_id"`         // 快递电子面单账号
	PartnerKey       string  `json:"partner_key"`        // 快递电子面子key
	ExpressOutlets   string  `json:"express_outlets"`    //快递网点
	ExpressCost      float64 `json:"express_cost"`       //快递成本
	ExpressOffer     float64 `json:"express_offer"`      //快递报价
	IsDefault        int32   `json:"is_default"`         //0:不是默认快递 1：默认快递
}

type IncreaseExpressResp struct {
}

//增加快递设置
func IncreaseExpress(req *IncreaseExpressReq, ShopID uint64) (res *IncreaseExpressResp, err error) {
	tb := dbGorm.Table("shop_express")
	if req.IsDefault == 1 {
		err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"is_default": 0}).Error
		if err != nil {
			err = fmt.Errorf("IncreaseExpress Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	Express := &entity.ShopExpress{}
	Express.ShopID = ShopID
	Express.ExpressName = req.ExpressName
	Express.ExpressCode = req.ExpressCode
	Express.ExpressCompanyID = req.ExpressCompanyID
	Express.PartnerID = null.NewString(req.PartnerID, true)
	Express.PartnerKey = null.NewString(req.PartnerKey, true)
	Express.ExpressOutlets = null.NewString(req.ExpressOutlets, true)
	Express.ExpressCost = null.NewFloat(req.ExpressCost, true)
	Express.ExpressOffer = null.NewFloat(req.ExpressOffer, true)
	Express.IsDefault = req.IsDefault
	err = tb.Create(Express).Error
	if err != nil {
		err = fmt.Errorf("IncreaseExpress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//修改快递设置request
type ModifyExpressReq struct {
	ExpressID        uint32  `json:"express_id"`         //快递公司id
	ExpressName      string  `json:"express_name"`       //快递名称
	ExpressCode      string  `json:"express_code"`       //快递简称
	ExpressCompanyID uint32  `json:"express_company_id"` //快递公司ID
	PartnerID        string  `json:"partner_id"`         //快递电子面单账号
	PartnerKey       string  `json:"partner_key"`        //快递电子面子key
	ExpressOutlets   string  `json:"express_outlets"`    //快递网点
	ExpressCost      float64 `json:"express_cost"`       //快递成本
	ExpressOffer     float64 `json:"express_offer"`      //快递报价
	IsDefault        int32   `json:"is_default"`         //0:不是默认快递 1：默认快递
}

type ModifyExpressResp struct {
	ExpressID   uint32 `json:"express_id"`   //快递标识
	ExpressName string `json:"express_name"` //快递名称
	IsDefault   int32  `json:"is_default"`   //0:不是默认快递 1：默认快递
}

//修改快递设置
func ModifyExpress(req *ModifyExpressReq, ShopID uint64) (res *ModifyExpressResp, err error) {
	tb := dbGorm.Table("shop_express")
	if req.IsDefault == 1 {
		err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"is_default": 0}).Error
		if err != nil {
			err = fmt.Errorf("ModifyExpress Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	err = tb.Where("express_id=?", req.ExpressID).Update(map[string]interface{}{"express_name": req.ExpressName, "express_code": req.ExpressCode, "express_company_id": req.ExpressCompanyID, "express_outlets": req.ExpressOutlets,
		"partner_id": req.PartnerID, "partner_key": req.PartnerKey, "express_cost": req.ExpressCost, "express_offer": req.ExpressOffer, "is_default": req.IsDefault}).Error
	if err != nil {
		err = fmt.Errorf("ModifyExpress1 Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	res = &ModifyExpressResp{}
	err = tb.Where("express_id = ?", req.ExpressID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("ModifyExpress2 Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}

	return res, nil
}

//删除快递request
type DeleteExpressReq struct {
	ExpressID uint32 `json:"express_id"` //快递标识
}

type DeleteExpressResp struct {
	ExpressID   uint32 `json:"express_id"`   //快递标识
	ExpressName string `json:"express_name"` //快递名称
	IsDefault   int32  `json:"is_default"`   //0:不是默认快递 1：默认快递
}

//删除快递
func DeleteExpress(req *DeleteExpressReq) (res *DeleteExpressResp, err error) {
	tb := dbGorm.Table("shop_express")
	res = &DeleteExpressResp{}
	err = tb.Where("express_id = ?", req.ExpressID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("DeleteExpress Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	err = tb.Where("express_id = ?", req.ExpressID).Delete(res).Error
	if err != nil {
		return res, err
	}
	return res, nil
}

//快递公司request
type ExpressCompanyReq struct {
}

type ExpressCompanyResp struct {
	ID          uint32      `json:"id"`           // 快递公司ID
	ExpressName string      `json:"express_name"` //快递公司名称
	ExpressCode null.String `json:"express_code"` //快递编码
}

//快递公司
func PersonalExpressCompany(ShopID uint64) (res []*ExpressCompanyResp, err error) {

	tb := dbGorm.Table("system_express_company")
	var ExpressCount int = 0
	err = dbGorm.Table("shop_express").Where("shop_id=?", ShopID).Count(&ExpressCount).Error
	if ExpressCount > 0 {
		err = tb.Raw("SELECT * FROM `system_express_company` WHERE express_name NOT IN (SELECT express_name FROM `shop_express` WHERE shop_id=?)", ShopID).Scan(&res).Error
	} else {
		err = tb.Select("express_name,express_code,id").Scan(&res).Error
	}
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalExpressCompany Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//今日收益，今日订单request
type TodayinfoReq struct {
}

type TodayinfoResp struct {
	Profit     float64 `json:"profit"`      //今日收益
	OrderCount int     `json:"order_count"` //今日订单数
}

type TodayinfoRevenue struct {
	RevenueTodayProfit float64 `json:"revenue_today_profit"` //今日邮费收益
}

//今日收益，今日订单
func PersonalTodayinfo(ShopID uint64) (res *TodayinfoResp, err error) {

	tb := dbGorm.Table("shop_profit")
	res = &TodayinfoResp{}
	err = tb.Select("SUM(profit) as profit,COUNT(profit) as order_count").Where("shop_id =? AND DATEDIFF(created_at,NOW()) = -1", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalTodayinfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	Todayinfo := &TodayinfoRevenue{}
	err = dbGorm.Table("orders as a").Select("SUM(b.offer - IFNULL(b.cost,0)) as revenue_today_profit").
		Joins("inner join orders_logistics as b on b.order_id = a.order_id").
		Where("a.shop_id=? AND a.order_status = 3 AND b.is_default = 1 AND DATEDIFF(a.complete_time,NOW()) = -1", ShopID).Scan(&Todayinfo).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		zaplog.Errorf("PersonalWallet Db err:%s", err)
		return res, err
	}
	res.Profit = res.Profit + Todayinfo.RevenueTodayProfit
	return res, nil
}

//我的钱包request
type ShopWalletReq struct {
}

type ShopWalletResp struct {
	TotalProfit        float64 `json:"total_profit"`         //累计总收益
	MonthProfit        float64 `json:"month_profit"`         //月收益
	MonthCost          float64 `json:"month_cost"`           //月成本
	PostalRevenue      float64 `json:"postal_revenue"`       //邮费总收益
	RevenueMonthProfit float64 `json:"revenue_month_profit"` //邮费月收益
	RevenueMonthCost   float64 `json:"revenue_month_cost"`   //邮费月成本
}

//我的钱包
func PersonalWallet(ShopID uint64) (res *ShopWalletResp, err error) {

	tb := dbGorm.Table("shop_wallet")
	res = &ShopWalletResp{}
	err = tb.Select("month_profit,month_cost").Where("shop_id=? AND DATE_FORMAT(created_at,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m')", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		zaplog.Errorf("PersonalWallet Db err:%s", err)
		return res, err
	}
	err = tb.Select("sum(month_profit) as total_profit").Where("shop_id=?", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		zaplog.Errorf("PersonalWallet Db err:%s", err)
		return res, err
	}
	err = dbGorm.Table("orders as a").Select("SUM(b.offer - IFNULL(b.cost,0)) as postal_revenue").
		Joins("inner join orders_logistics as b on b.order_id = a.order_id").Where("a.shop_id=? AND b.is_default = 1 AND a.order_status = 3", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		zaplog.Errorf("PersonalWallet Db err:%s", err)
		return res, err
	}
	err = dbGorm.Table("orders as a").Select("SUM(b.offer - IFNULL(b.cost,0)) as revenue_month_profit,SUM(IFNULL(b.cost,0)) as revenue_month_cost").
		Joins("inner join orders_logistics as b on b.order_id = a.order_id").
		Where("a.shop_id=? AND b.is_default = 1 AND a.order_status = 3 AND DATE_FORMAT(a.complete_time,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m')", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		zaplog.Errorf("PersonalWallet Db err:%s", err)
		return res, err
	}
	res.TotalProfit = AddFloat64(res.TotalProfit, res.PostalRevenue)
	res.MonthProfit = AddFloat64(res.MonthProfit, res.RevenueMonthProfit)
	res.MonthCost = AddFloat64(res.MonthCost, res.RevenueMonthCost)
	return res, nil
}

//收支明细request
type OrderStreamReq struct {
	StartTime   time.Time `json:"start_time"`  //起始时间
	EndTime     time.Time `json:"end_time"`    //结束时间
	Start_Index int       `json:"start_index"` //查询起始索引
	Count       int       `json:"count"`       //页面列表个数
}

type OrderStreamResp struct {
	OrderID    string       `json:"order_id"`    //订单编号
	Price      float64      `json:"price"`       //售价
	Profit     float64      `json:"profit"`      //收益
	InputPrice float64      `json:"input_price"` //进价
	CreatedAt  *entity.Time `json:"created_at"`  //卖出时间
}

type TotalOrderResp struct {
	TotalPayPrice   float64 `json:"total_pay_price"`   //总售价
	TotalProfit     float64 `json:"total_profit"`      //总收益
	TotalInputPrice float64 `json:"total_input_price"` //总进价
}

//收支明细
func PersonalOrderStream(req *OrderStreamReq, ShopID uint64) (res []*OrderStreamResp, resp *TotalOrderResp, err error) {

	tb := dbGorm.Table("shop_profit")
	err = tb.Offset(req.Start_Index).Limit(req.Count).Raw("SELECT order_id,created_at,(price - profit) as input_price,profit,price FROM `shop_profit` WHERE shop_id =? ORDER BY created_at desc", ShopID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalOrderStream Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	resp = &TotalOrderResp{}
	err = tb.Select("IFNULL((sum(price) - sum(profit)),0) as total_input_price,IFNULL(sum(profit),0) as total_profit,IFNULL(sum(price),0) as total_pay_price").Where("shop_id=?", ShopID).Scan(resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalOrderStream Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

//搜索收支明细
func SearchOrderStream(req *OrderStreamReq, ShopID uint64) (res []*OrderStreamResp, resp *TotalOrderResp, err error) {

	tb := dbGorm.Table("shop_profit")
	err = tb.Offset(req.Start_Index).Limit(req.Count).Raw("SELECT order_id,created_at,(price - profit) as input_price,profit,price FROM `shop_profit` WHERE shop_id =? AND created_at >= ? AND created_at <= ? ORDER BY created_at desc", ShopID, req.StartTime, req.EndTime).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SearchOrderStream Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	resp = &TotalOrderResp{}
	err = tb.Select("IFNULL((sum(price) - sum(profit)),0) as total_input_price,IFNULL(sum(profit),0) as total_profit,IFNULL(sum(price),0) as total_pay_price").Where("shop_id=? AND created_at >= ? AND created_at <= ?", ShopID, req.StartTime, req.EndTime).Scan(resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalOrderStream Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

//访问量，关注，粉丝request
type VisitFansShopReq struct {
}

type VisitFansShopResp struct {
	Visit        int `json:"visit"`         //访问量
	PersonalFans int `json:"personal_fans"` //我的粉丝
	FollowShop   int `json:"follow_shop"`   //我的关注
}

//访问量，关注，粉丝
func PersonalVisitFansShop(UserID uint32, Role UserRoleType) (res *VisitFansShopResp, err error) {
	if Role == UserRoleType_Buyer {
		tb := dbGorm.Table("goods_access_records")
		res = &VisitFansShopResp{}
		err = tb.Raw("SELECT COUNT(distinct goods_id,date_format(created_at,'%Y-%m-%d')) as visit FROM goods_access_records where user_id =? AND shop_id != ?", UserID, UserID).Scan(res).Error
		if err != nil {
			err = fmt.Errorf("PersonalVisitFansShop Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
		err = tb.Raw("SELECT COUNT(id) as follow_shop FROM shop_fans where user_id =?", UserID).Scan(res).Error
		if err != nil {
			err = fmt.Errorf("PersonalVisitFansShop Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	} else {
		tb := dbGorm.Table("goods_access_records")
		res = &VisitFansShopResp{}
		err = tb.Where("shop_id=? AND user_id != ? AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(created_at)", UserID, UserID).Count(&res.Visit).Error
		if err != nil {
			err = fmt.Errorf("PersonalVisitFansShop Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
		err = tb.Raw("SELECT COUNT(id) as follow_shop FROM shop_fans where user_id =?", UserID).Scan(res).Error
		if err != nil {
			err = fmt.Errorf("PersonalVisitFansShop Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
		err = tb.Raw("SELECT COUNT(id) as personal_fans FROM shop_fans where shop_id =?", UserID).Scan(res).Error
		if err != nil {
			err = fmt.Errorf("PersonalVisitFansShop Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	return res, err
}

//个人信息equest
type UserInformationShopReq struct {
}

type UserInformationShopResp struct {
	NickName    string       `json:"nick_name"`     //用户姓名
	AvatarURL   string       `json:"avatar_url"`    //用户头像
	ShopName    string       `json:"shop_name"`     //店铺名称
	SmallWxCode string       `json:"small_wx_code"` //用户小程序码图片地址
	PhoneNumber null.String  `json:"phone_number"`  //y用户手机号
	DateNow     *entity.Time `json:"date_now"`      //当前时间
	EndTime     *entity.Time `json:"end_time"`      //到期时间
}

//个人信息
func PersonalInformation(UserID uint32, Role UserRoleType) (res *UserInformationShopResp, err error) {
	tb := dbGorm.Table("user")
	res = &UserInformationShopResp{}
	err = tb.Select("user.nick_name,user.avatar_url,small_wx_code,user.phone_number,now() as date_now,shop_vip.end_time").Joins("left join shop_vip on user.user_id = shop_vip.user_id").
		Where("user.user_id=?", UserID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalInformation Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	err = dbGorm.Table("shop_info").Select("shop_name").Where("user_id=?", UserID).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalInformation Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//保存用户小程序码
func SaveUserSmallWxCode(UserID uint32, wxCode string) (err error) {
	tb := dbGorm.Table("user")
	err = tb.Where("user.user_id=?", UserID).Update("small_wx_code", wxCode).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("PersonalInformation Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	return nil
}

type IsMemberResp struct {
	IsMember uint32 `json:"is_member"` //是否是会员 0不是会员  1是会员
}

//现在是否是会员
func IsSeeMember(UserID uint32) (res *IsMemberResp, err error) {
	tb := dbGorm.Table("shop_vip")
	res = &IsMemberResp{}
	err = tb.Where("user_id=? AND end_time > now()", UserID).Count(&res.IsMember).Error
	if err != nil {
		err = fmt.Errorf("IsSeeMember Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

type VipExplainResp struct {
	VipExplain      int32 `json:"vip_explain"`      // vip限制（）
	OrdinaryExplain int32 `json:"ordinary_explain"` // 普通用户限制（）
}

//限制次数
func ShopVipExplain(PayId uint32, IsMember uint32) (res *VipExplainResp, err error) {
	tb := dbGorm.Table("shop_vip_explain")
	res = &VipExplainResp{}
	err = tb.Select("ordinary_explain,vip_explain").Where("id = ?", PayId).Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("ShopVipExplain Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//查看会员界面equest
type SeeMemberReq struct {
}

type SeeMemberResp struct {
	IsMember int                   `json:"is_member"` //是否开通过会员 0没开通过  1开通过
	UserID   uint32                `json:"user_id"`   //用户
	VipLevel uint32                `json:"vip_level"` //vip等级
	VipName  string                `json:"vip_name"`  //等级名称
	EndTime  *entity.Time          `json:"end_time"`  //到期时间
	Price    []*SeeMemberPriceResp `json:"member_info"`
}

type SeeMemberPriceResp struct {
	ID                  uint32  `json:"id"`                    //商品标识
	MemberName          string  `json:"member_name"`           //商品名称
	MemberDiscountPrice float64 `json:"member_discount_price"` //商品折扣价格
	MemberOriginalPrice float64 `json:"member_original_price"` //商品原始价格
	MemberJianShao      string  `json:"member_jian_shao"`      //商品简绍
}

//查看商品价格
func SeePriceID(ID uint32) (res *SeeMemberPriceResp, err error) {
	tb := dbGorm.Table("shop_vip_price")
	res = &SeeMemberPriceResp{}
	err = tb.Where("id=?", ID).Scan(res).Error
	if err != nil {
		err = fmt.Errorf("SeePriceID Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//是否开通过会员
func IsSeeVip(UserID uint32) (res *SeeMemberResp, err error) {
	tb := dbGorm.Table("shop_vip")
	res = &SeeMemberResp{}
	err = tb.Where("user_id=?", UserID).Count(&res.IsMember).Error
	if err != nil {
		err = fmt.Errorf("SeeMemberReq Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//查看会员界面
func SeeMember(UserID uint32) (res *SeeMemberResp, err error) {
	tb := dbGorm.Table("shop_vip")
	res = &SeeMemberResp{}
	err = tb.Where("user_id=?", UserID).Count(&res.IsMember).Error
	if err != nil {
		err = fmt.Errorf("SeeMemberReq Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	err = dbGorm.Table("shop_vip_price").Scan(&res.Price).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeMemberReq Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	if res.IsMember > 0 {
		err = tb.Where("user_id=?", UserID).Scan(res).Error
		if err != nil && !gorm.IsRecordNotFoundError(err) {
			err = fmt.Errorf("SeeMemberReq Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	return res, nil
}

//保存充值流水发起状态equest
type SeeMemberPriceReq struct {
	ID          uint32  `json:"id"`           //商品标识
	MemberPrice float64 `json:"member_price"` //商品价格
	MemberName  string  `json:"member_name"`  //商品名称
	UserID      uint32  `json:"user_id"`      //到账用户
	TrandID     string  `json:"trand_id"`     //商户流水编号
}

//保存充值流水发起状态
func SeeMemberPrice(req *SeeMemberPriceReq) (err error) {
	tb := dbGorm.Table("vip_recharge_records")
	err = tb.Create(&entity.VipRechargeRecords{
		TrandID:     req.TrandID,
		UserID:      req.UserID,
		MemberPrice: req.MemberPrice,
		FeeType:     req.ID,
		Status:      0,
		Remark:      req.MemberName,
	}).Error
	if err != nil {
		err = fmt.Errorf("SeeMemberPrice Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	return err
}

type MemberPriceResp struct {
	MemberPrice float64 `json:"member_price"` //商品价格
}

//查看商品价格
func SeePrice(TrandID string) (res *MemberPriceResp, err error) {
	tb := dbGorm.Table("vip_recharge_records")
	res = &MemberPriceResp{}
	err = tb.Where("trand_id=?", TrandID).Scan(res).Error
	if err != nil {
		err = fmt.Errorf("SeePrice Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, err
}

//开通续费会员equest
type Membership struct {
	ID uint32 `json:"id"` //商品标识
}

type OpenMembershipReq struct {
	ID         uint32 `json:"id"`          //商品标识
	OpenID     string `json:"open_id"`     //到账用户
	TrandID    string `json:"trand_id"`    //商户流水编号
	RechargeID string `json:"recharge_id"` //充值流水编号
	Status     int32  `json:"status"`      // 订单状态0发起1成功-1异常
}

type OpenMembershipResp struct {
	UserID     uint32       `json:"user_id"` //到账用户
	IsUserNull uint32       //是否开通过会员
	Status     int32        `json:"status"`   // 订单状态0发起1成功-1异常
	FeeType    uint32       `json:"fee_type"` // 充值类型（1：一个月 2：一个季度 3：一年 4：自定义月数）
	EndTime    *entity.Time `json:"end_time"` //到期时间
}

//查询订单状态
func OpenMemberStatus(req *OpenMembershipReq) (res *OpenMembershipResp, err error) {
	tb := dbGorm.Table("vip_recharge_records")
	res = &OpenMembershipResp{}
	err = tb.Select("status,fee_type").Where("trand_id=?", req.TrandID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("OpenMemberStatus Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//开通会员
func OpenMembership(req *OpenMembershipReq) (err error) {
	tb := dbGorm.Table("shop_vip")
	res := &OpenMembershipResp{}
	if req.Status != 2 {
		err = dbGorm.Table("user").Select("user_id").Where("open_id=?", req.OpenID).Scan(res).Error
		if err != nil {
			err = fmt.Errorf("OpenMembership Db err:%s", err)
			zaplog.Errorf(err.Error())
			return err
		}
		err = tb.Where("user_id=?", res.UserID).Scan(res).Count(&res.IsUserNull).Error
		if res.IsUserNull == 0 {
			OpenMembership := &entity.ShopVip{}
			OpenMembership.UserID = res.UserID
			OpenMembership.OpeningTime = entity.Now()
			if req.ID == 1 || req.ID == 4 {
				OpenMembership.EndTime = &entity.Time{Time: entity.Now().AddDate(0, 1, 0)}
			} else if req.ID == 2 {
				OpenMembership.EndTime = &entity.Time{Time: entity.Now().AddDate(0, 3, 0)}
			} else {
				OpenMembership.EndTime = &entity.Time{Time: entity.Now().AddDate(1, 0, 0)}
			}
			err = tb.Create(OpenMembership).Error
			if err != nil {
				err = fmt.Errorf("OpenMembership Db err:%s", err)
				zaplog.Errorf(err.Error())
				return err
			}
		} else {
			var EndTime *entity.Time
			if req.ID == 1 {
				EndTime = &entity.Time{Time: res.EndTime.AddDate(0, 1, 0)}
			} else if req.ID == 2 {
				EndTime = &entity.Time{Time: res.EndTime.AddDate(0, 3, 0)}
			} else {
				EndTime = &entity.Time{Time: res.EndTime.AddDate(1, 0, 0)}
			}
			err = tb.Where("user_id=?", res.UserID).Update(map[string]interface{}{"end_time": EndTime}).Error
			if err != nil {
				err = fmt.Errorf("OpenMembership Db err:%s", err)
				zaplog.Errorf(err.Error())
				return err
			}
		}
	}
	err = dbGorm.Table("vip_recharge_records").Where("trand_id=?", req.TrandID).Update(map[string]interface{}{"recharge_id": req.RechargeID, "status": req.Status}).Error
	if err != nil {
		err = fmt.Errorf("OpenMembership Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	return err
}

//查看绑定手机号equest
type SeePhoneNumberReq struct {
}

type SeePhoneNumberResp struct {
	PhoneNumber string `json:"phone_number"` //手机号
}

//查看绑定手机号
func SeePhoneNumber(UserID uint32) (res *SeePhoneNumberResp, err error) {
	tb := dbGorm.Table("user")
	res = &SeePhoneNumberResp{}
	err = tb.Select("phone_number").Where("user_id=?", UserID).Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeePhoneNumber Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//查看隐私政策equest
type SeePrivacyPolicyReq struct {
}

type SeePrivacyPolicyResp struct {
	PrivacyPolicy null.String `json:"privacy_policy"` //手机号
}

//查看隐私政策
func SeePrivacyPolicy(req *SeePrivacyPolicyReq) (res *SeePrivacyPolicyResp, err error) {
	tb := dbGorm.Table("user_set_up")
	res = &SeePrivacyPolicyResp{}
	err = tb.Select("privacy_policy").Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeePrivacyPolicy Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//查看用户服务协议equest
type SeeServiceAgreementReq struct {
}

type SeeServiceAgreementResp struct {
	UserServiceAgreement null.String `json:"user_service_agreement"` //手机号
}

//查看用户服务协议
func SeeServiceAgreement(req *SeeServiceAgreementReq) (res *SeeServiceAgreementResp, err error) {
	tb := dbGorm.Table("user_set_up")
	res = &SeeServiceAgreementResp{}
	err = tb.Select("user_service_agreement").Scan(res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("SeeServiceAgreement Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//访问信息request
type VisitInfoReq struct {
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type VisitInfoResp struct {
	UserID    uint32       `json:"user_id"`    //用户ID
	NickName  string       `json:"nick_name"`  //用户名称
	GoodsName string       `json:"goods_name"` //商品名称
	CreatedAt *entity.Time `json:"created_at"` //访问时间
}

type VisitCount struct {
	TodayVisit int `json:"today_visit"` //今日访问量
	TotalVisit int `json:"total_visit"` //访问次数
}

//访问信息
func VisitInfo(req *VisitInfoReq, ShopID uint64) (res []*VisitInfoResp, resp *VisitCount, err error) {
	tb := dbGorm.Table("goods_access_records")
	rows := tb.Offset(req.Start_Index).Limit(req.Count).Select("goods_access_records.created_at,user.nick_name,user.user_id,goods.goods_name").Joins("inner join user on user.user_id = goods_access_records.user_id").
		Joins("inner join goods on goods.goods_id = goods_access_records.goods_id").Where("goods_access_records.shop_id=? AND goods_access_records.user_id != ? AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(goods_access_records.created_at)", ShopID, ShopID).Order("goods_access_records.created_at desc")
	rows.Scan(&res)
	err = rows.Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("VisitInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	resp = &VisitCount{}
	err = tb.Where("shop_id=? AND user_id != ? AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(created_at)", ShopID, ShopID).Count(&resp.TodayVisit).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("VisitInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	err = tb.Select("COUNT(distinct user_id) as total_visit").Where("shop_id = ? AND user_id != ?  AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(created_at)", ShopID, ShopID).Scan(resp).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("VisitInfo Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, resp, err
	}
	return res, resp, nil
}

//访问历史（用户）request
type VisitHistoryReq struct {
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type VisitHistoryResp struct {
	GoodsID     string      `json:"goods_id"`      //商品id
	GoodsImgURL null.String `json:"goods_img_url"` //商品图片
	Price       float64     `json:"price"`         //商品价格
	CreatedAt   float64     `json:"created_at"`    //访问时间戳
}

//访问历史（用户）
func VisitHistory(req *VisitHistoryReq, UserID uint32) (res []*VisitHistoryResp, err error) {
	tb := dbGorm.Table("goods_access_records")
	err = tb.Offset(req.Start_Index).Limit(req.Count).Select("distinct goods_access_records.goods_id,UNIX_TIMESTAMP(date_format(goods_access_records.created_at,'%Y-%m-%d')) as created_at,goods.goods_img_url,goods.price").Joins("inner join goods on goods.goods_id = goods_access_records.goods_id").
		Where("goods_access_records.user_id=?", UserID).Order("created_at desc").Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("VisitHistory Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//查询用户或店铺头像 request
type SeeHeadURLReq struct {
	UserID uint32 `json:"user_id"` //用户ID
	ShopID uint64 `json:"shop_id"` //店铺ID
}

type SeeHeadURLResp struct {
	AvatarURL string `json:"avatar_url"` //头像
}

//查询用户或店铺头像
func SeeHeadURL(req *SeeHeadURLReq) (res *SeeHeadURLResp, err error) {
	res = &SeeHeadURLResp{}
	if req.UserID > 999999 {
		err = dbGorm.Table("user").Select("avatar_url").Where("user_id=?", req.UserID).Scan(res).Error
		if err != nil && !gorm.IsRecordNotFoundError(err) {
			err = fmt.Errorf("SeeHeadURL Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	if req.ShopID > 999999 {
		err = dbGorm.Table("shop_info").Select("shop_url as avatar_url").Where("shop_id=?", req.ShopID).Scan(res).Error
		if err != nil && !gorm.IsRecordNotFoundError(err) {
			err = fmt.Errorf("SeeHeadURL Db err:%s", err)
			zaplog.Errorf(err.Error())
			return res, err
		}
	}
	return res, nil
}

type VipRechargeRecordsReq struct {
	Start_Index int `json:"start_index"` //查询起始索引
	Count       int `json:"count"`       //页面列表个数
}

type VipRechargeRecordsResp struct {
	TrandID     string       `json:"trand_id"`     //商户流水编号
	MemberPrice float64      `json:"member_price"` //充值金额
	Remark      string       `json:"remark"`       //订单描述
	Status      string       `json:"status"`       //订单状态0发起1成功-1异常
	CreatedAt   *entity.Time `json:"created_at"`   //订单发起时间
}

//查询用户VIP充值记录
func VipRechargeRecords(req *VipRechargeRecordsReq, UserID uint32) (res []*VipRechargeRecordsResp, err error) {
	tb := dbGorm.Table("vip_recharge_records")
	err = tb.Offset(req.Start_Index).Limit(req.Count).Where("user_id=?", UserID).Order("created_at desc").Scan(&res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("VipRechargeRecords Db err:%s", err)
		zaplog.Errorf(err.Error())
		return res, err
	}
	return res, nil
}

//编辑图片水印
type ShopWatermarkReq struct {
	Watermark string `json:"watermark"` //图片水印配置数据
	TContent  string `json:"t_content"` //图片水印文字
	IsEnable  int32  `json:"is_enable"` //状态0不启用1启用
}

//编辑图片水印
func ShopWatermarkModel(req *ShopWatermarkReq, ShopID uint64) (err error) {
	tb := dbGorm.Table("shop_info")
	json_watermark := gconv.String(&req)
	err = tb.Where("shop_id=?", ShopID).Update(map[string]interface{}{"shop_watermark": json_watermark}).Error
	if err != nil {
		err = fmt.Errorf("ShopWatermarkModel Db err:%s", err)
		zaplog.Errorf(err.Error())
		return err
	}
	return err
}

//解析图片水印
func ShopWatermarkAnalysis(ShopID uint64) (shopWatermark *ShopWatermarkReq, err error) {
	//查看图片水印配置
	ShopInfo_res := &entity.ShopInfo{}
	err = dbGorm.Table("shop_info").Where("shop_id=?", ShopID).First(ShopInfo_res).Error
	if err != nil && !gorm.IsRecordNotFoundError(err) {
		err = fmt.Errorf("ShopWatermarkAnalysis shop_info Db err:%s", err)
		zaplog.Errorf(err.Error())
		return nil, err
	}
	//解析json
	shopWatermark = &ShopWatermarkReq{}
	err = jsoniter.Unmarshal([]byte(ShopInfo_res.ShopWatermark.String), &shopWatermark)
	if err != nil {
		zaplog.Errorf("ShopWatermarkAnalysis, err=%s", err)
		return nil, err
	}

	return
}
