package model

// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

import (
	"daigou/app/model/entity"
	"daigou/library/conf"
	"daigou/library/public"
	"daigou/library/zaplog"
	"fmt"

	"github.com/gogf/gf/util/gutil"
	"github.com/guregu/null"
	"github.com/jinzhu/gorm"
)

type UserRoleType int32 //角色类型

const (
	UserRoleType_Buyer    UserRoleType = iota + 1 //用户
	UserRoleType_Personal                         //个体商户
	UserRoleType_Promoter                         //推广员
	UserRoleType_Agent                            //代购
)

type DbWxLoginIn struct {
	Type      int32  `json:"type"` //登录类型(1:普通登录 2:分享链接登录 3:二维码登录)
	UnionID   string `json:"union_id"`
	OpenID    string `json:"open_id"`
	NickName  string `json:"nick_name"`
	AvatarURL string `json:"avatar_url"`
	Gender    int32  `json:"gender"`
	Country   string `json:"country"`
	Province  string `json:"province"`
	City      string `json:"city"`
	Language  string `json:"language"`
}

type DbWxLoginOut struct {
	UserID      uint32       `json:"user_id"`
	Role        UserRoleType `json:"role"`
	PhoneNumber string       `json:"phone_number"` //手机号
	ShopID      uint64       `json:"shop_id"`      //自己的商店id
	BindShopID  uint64       `json:"bind_shop_id"` //绑定的别人的商店id
}

func WxLogin(_args *DbWxLoginIn) (out *DbWxLoginOut, err error) {
	defer func() {
		if err != nil {
			AddLoginRecord(&entity.UserLoginRecords{UserID: out.UserID, Type: _args.Type})
		}
	}()
	//查询数据库中是否存在该玩家
	tb := dbGorm.Table("user")
	out = &DbWxLoginOut{}
	err = tb.Select("a.user_id,a.role,a.phone_number,a.bind_shop_id,b.shop_id").Joins("a left join shop_info b on a.user_id =b.user_id").Where("a.open_id=?", _args.OpenID).Find(out).Error
	newUser := &entity.User{
		UnionID:   _args.UnionID,
		OpenID:    _args.OpenID,
		NickName:  _args.NickName,
		AvatarURL: _args.AvatarURL,
		Gender:    _args.Gender,
		Country:   _args.Country,
		Province:  _args.Province,
		City:      _args.City,
		Language:  _args.Language,
	}
	if gorm.IsRecordNotFoundError(err) {
		newUser.Role = int32(UserRoleType_Buyer)
		//如果是新用户,插入新用户到db
		err = tb.Create(newUser).Error
		if err != nil {
			zaplog.Errorf("WxLogin Db err:%s", err)
			return nil, err
		}
		//执行Create会把新的user_id赋值给newUser.UserID
		out.UserID = newUser.UserID
		out.Role = UserRoleType(newUser.Role)
		return
	}
	//如果是老用户,更新用户信息
	err = tb.Model(newUser).Where("user_id=?", out.UserID).Updates(newUser).Error
	if err != nil {
		zaplog.Errorf("WxLogin Db err:%s", err)
		return nil, err
	}
	return
}

type DbTestUserLoginIn struct {
	Type     int32 `json:"type"`                                      //登录类型(1:普通登录 2:分享链接登录 3:二维码登录)
	UserType int32 `json:"user_type" v:"user_type@required#用户类型不能为空"` //用户类型(1:买家体验号,2:卖家体验号)
}

type DbTestUserLoginOut struct {
	DbWxLoginOut
	OpenID string `json:"open_id"`
}

func TestUserLogin(_args *DbTestUserLoginIn) (out *DbTestUserLoginOut, err error) {
	defer func() {
		if err != nil {
			AddLoginRecord(&entity.UserLoginRecords{UserID: out.UserID, Type: _args.Type})
		}
	}()

	//查询数据库中是否存在该玩家
	userID := conf.Conf.TestUser.Buyer.UserID
	if _args.UserType == 2 {
		userID = conf.Conf.TestUser.Seller.UserID
	}

	tb := dbGorm.Table("user")
	out = &DbTestUserLoginOut{}
	err = tb.Select("a.user_id,a.open_id,a.role,a.phone_number,a.bind_shop_id,b.shop_id").Joins("a left join shop_info b on a.user_id =b.user_id").Where("a.user_id=?", userID).Find(out).Error
	if err != nil {
		zaplog.Errorf("TestUserLogin Db err:%s", err)
	}
	return
}

type IsBindPhoneNumberReq struct {
	IsBind uint32
}

//判断该手机号是否已经绑定
func IsbindPhoneNumber(PhoneNumber string) (res *IsBindPhoneNumberReq, msg string, err error) {
	//查询数据库中是否存在该玩家
	tb := dbGorm.Table("user")
	res = &IsBindPhoneNumberReq{}
	err = tb.Where("phone_number=?", PhoneNumber).Count(&res.IsBind).Error
	if err != nil {
		zaplog.Errorf("IsbindPhoneNumber Db err:%s", err)
	}
	if res.IsBind == 0 {
		return res, "", err
	} else {
		return res, "该手机号已经绑定过，请勿重复绑定", err
	}
}

type DbBindPhoneNumberIn struct {
	UserID      uint32 `json:"user_id"`
	PhoneNumber string `json:"phone_number"`
	CountryCode string `json:"country_code"`
}

// 绑定手机号
func BindPhoneNumber(_args *DbBindPhoneNumberIn) (err error) {
	zaplog.Debugf("_args=%+v", _args)
	//查询数据库中是否存在该玩家
	tb := dbGorm.Table("user")
	err = tb.Select("phone_number,country_code").Where("user_id=?", _args.UserID).Update(_args).Error
	if err != nil {
		zaplog.Errorf("BindPhoneNumber Db err:%s", err)
	}
	return
}

type DbGetRecommendShopOut1 struct {
	ShopID          uint32      `json:"shop_id"`          //商店id
	ShopURL         string      `json:"shop_url"`         //店铺头像
	ShopName        string      `json:"shop_name"`        //商店名称
	ShopDescription null.String `json:"shop_description"` //店铺说明
}

type DbGetRecommendShopOut struct {
	*DbGetRecommendShopOut1
	CategoryInfo string `json:"category_info"` //分类信息
}

type DbGetRecommendShopIn struct {
}

//获取推荐店铺
func GetRecommendShop(_args *DbGetRecommendShopIn) (out []*DbGetRecommendShopOut, err error) {
	zaplog.Debugf("_args=%+v", _args)
	//查询数据库中是否存在该玩家
	tb := dbGorm.Table("shop_info")
	out = make([]*DbGetRecommendShopOut, 0, 5)
	err = tb.Select("shop_id,shop_url,shop_name,shop_description,category_info").Where("is_recommend =?", 1).Order("created_at asc").Limit(5).Find(&out).Error
	if err != nil {
		zaplog.Errorf("GetRecommendShop Db err:%s", err)
		return nil, err
	}
	return
}

type DbBindShopIn struct {
	UserID     uint32 `json:"user_id"`
	BindShopID uint64 `json:"bind_shop_id"` //绑定的别人的商店id
}

type DbBindShopOut struct {
	BindShopID uint64 `json:"bind_shop_id"` //绑定成功的别人的商店id
}

//绑定店铺
func BindShop(_tx *gorm.DB, _args *DbBindShopIn) (out *DbBindShopOut, err error) {
	zaplog.Debugf("_args=%+v", _args)
	//查询商店是否存在
	has1, err := dbXorm.Table("shop_info").Cols("user_id").Where("shop_id=?", _args.BindShopID).Exist()
	if !has1 {
		err = fmt.Errorf("商店不存在")
		zaplog.Errorf("BindShop Db err:%s", err)
		return nil, err
	}
	out = &DbBindShopOut{}

	//查询是否已经绑定
	if err = dbGorm.Table("user").Select("bind_shop_id").Where("user_id=?", _args.UserID).Scan(out).Error; err != nil {
		zaplog.Infof("BindShop Db err:%s", err)
		return nil, err
	}

	if out.BindShopID != 0 {
		err = fmt.Errorf("已绑定其他商店")
		zaplog.Infof("BindShop Db err:%s", err)
		return nil, err
	}

	tx := _tx
	if tx == nil {
		tx = dbGorm.Begin()
	}

	defer func() {
		if _tx != nil { //上级事务传递进来
			return
		}
		//当前函数为一个完整事务
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit().Error
	}()
	//更新
	err = tx.Table("user").Where("user_id=? AND (bind_shop_id is null or bind_shop_id = 0)", _args.UserID).Update(map[string]interface{}{"bind_shop_id": _args.BindShopID}).Error
	if err != nil {
		zaplog.Errorf("BindShop Db err:%s", err)
		return nil, err
	}
	has, err := dbXorm.Table("shop_fans").Where("shop_id=? and user_id=?", _args.BindShopID, _args.UserID).Exist()
	if has {
		err = dbGorm.Table("shop_fans").Where("user_id=? and shop_id =?", _args.UserID, _args.BindShopID).Update(map[string]interface{}{"category": 1}).Error
		if err != nil {
			zaplog.Errorf("IncreaseFans Db err:%s", err)
			return nil, err
		}
	} else {
		err = IncreaseFans(_tx, &IncreaseFansReq{ShopID: _args.BindShopID, UserID: _args.UserID, Category: 1})
		if err != nil {
			zaplog.Errorf("BindShop Db err:%s", err)
			return nil, err
		}
	}
	out.BindShopID = _args.BindShopID
	return
}

type DbUseShopCodeIn struct {
	GenType    public.ShopCodeType `json:"gen_type"`     //生成类型
	UserID     uint32              `json:"user_id"`      //用户id
	BindShopID uint64              `json:"bind_shop_id"` //绑定的别人的商店id
}

type DbUseShopCodeOut struct {
	BindShopID uint64       `json:"bind_shop_id"` //绑定的别人的商店id
	ShopID     uint64       `json:"shop_id"`      //自己的商店id
	Role       UserRoleType `json:"role"`         //角色id(0用户1个体商户2推广员3代购4总代)
}

//使用店铺码
func UseShopCode(_args *DbUseShopCodeIn) (out *DbUseShopCodeOut, err error) {
	zaplog.Debugf("_args=%+v", _args)
	role := UserRoleType_Agent

	tx := dbGorm.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit().Error
	}()

	if err = tx.Error; err != nil {
		return
	}

	//更新角色
	tb := tx.Table("user")
	err = tb.Where("user_id=?", _args.UserID).Update(map[string]interface{}{"role": role}).Error
	if err != nil {
		zaplog.Errorf("UseShopCode Db err:%s", err)
		return
	}

	user := &entity.User{}
	//查询用户信息
	err = tb.Where("user_id=?", _args.UserID).First(user).Error
	if err != nil {
		zaplog.Errorf("UseShopCode Db err:%s", err)
		return
	}

	//新增自己的店铺
	shopInfo := &entity.ShopInfo{
		ShopID:             uint64(_args.UserID),
		UserID:             _args.UserID,
		ShopName:           fmt.Sprintf("%s的商店", user.NickName),
		ShopURL:            user.AvatarURL,
		IsEnable:           1,
		MainpageScrollInfo: null.NewString(entity.ShopInfoScrollInfoNew(), true),
	}
	err = tx.Table("shop_info").Create(shopInfo).Error
	if err != nil {
		zaplog.Errorf("UseShopCode Db err:%s", err)
		return
	}
	//新增钱包记录
	err = tx.Table("shop_wallet").Create(&entity.ShopWallet{ShopID: uint64(_args.UserID)}).Error
	if err != nil {
		zaplog.Errorf("AddShopCodeRecord Db err:%s", err)
		return
	}
	//新增商铺码使用记录
	err = AddShopCodeRecord(tx, &entity.ShopCodeRecords{ShopID: uint64(_args.UserID), GenType: uint32(_args.GenType), BindShopID: _args.BindShopID})
	if err != nil {
		zaplog.Errorf("UseShopCode Db err:%s", err)
		return
	}

	//更新
	// err = tx.Table("user").Where("user_id=?", _args.UserID).Update(map[string]interface{}{"bind_shop_id": 0}).Error

	// var bindShopID uint64 = 0
	// if _args.GenType == public.ShopCodeType_Shop {
	// 	//修改店铺绑定关系和粉丝关系
	// 	res1, err := BindShop(tx, &DbBindShopIn{UserID: _args.UserID, BindShopID: _args.BindShopID})
	// 	if err != nil {
	// 		zaplog.Errorf("UseShopCode Db err:%s", err)
	// 		return nil, err
	// 	}
	// 	bindShopID = res1.BindShopID
	// }

	out = &DbUseShopCodeOut{ShopID: uint64(_args.UserID), Role: role}
	return
}

// 加载游客账号
func LoadTestUser() {
	testUserConf := conf.Conf.TestUser
	testUser := []*entity.User{}
	err := dbGorm.Table("user").Select("user_id,open_id").Where("open_id in (?,?)", testUserConf.Buyer.OpenID, testUserConf.Seller.OpenID).Scan(&testUser).Error
	if err != nil {
		zaplog.Errorf("游客账号加载失败, err:%s", err)
		return
	}
	//保存游客账号信息
	for _, v := range testUser {
		if v.OpenID == testUserConf.Buyer.OpenID {
			testUserConf.Buyer.UserID = v.UserID
		} else if v.OpenID == testUserConf.Seller.OpenID {
			testUserConf.Seller.UserID = v.UserID
		}
	}
	zaplog.Infof("游客账号加载成功, %s", gutil.Export(testUserConf))
}
